(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{T:()=>mt,b:()=>ft});const e=(t,e,n)=>{for(let r=0;r<t;r++){const t=document.createElement("img");e.childNodes[r].childNodes[n].appendChild(t)}},n=(t,e,n)=>{for(let r=e;r<t;r++){const t=document.createElement("img");n.childNodes[r].appendChild(t)}},r=(t,e)=>{for(let n=0;n<t;n++){const t=document.createElement("div");e.appendChild(t)}},o=(t,e,n,r)=>{for(let o=e;o<t;o++)for(let t=0;t<r;t++){const t=document.createElement("div");n.childNodes[o].appendChild(t)}},a=(t,e,n)=>{for(let r=e;r<t;r++)for(let t=0;t<1;t++){const t=document.createElement("div");n.childNodes[r].childNodes[2].appendChild(t)}},i=(t,e,n)=>{for(let r=e;r<t;r++)for(let t=0;t<1;t++){const t=document.createElement("div");n.childNodes[r].childNodes[3].appendChild(t)}};function s(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function d(t){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},d(t)}function c(t){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},c(t)}function u(t){s(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===c(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function l(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function h(t){s(1,arguments);var e=u(t),n=e.getUTCDay(),r=(n<1?7:0)+n-1;return e.setUTCDate(e.getUTCDate()-r),e.setUTCHours(0,0,0,0),e}function f(t){s(1,arguments);var e=u(t),n=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var o=h(r),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var i=h(a);return e.getTime()>=o.getTime()?n+1:e.getTime()>=i.getTime()?n:n-1}var m={};function y(){return m}function g(t,e){var n,r,o,a,i,d,c,h;s(1,arguments);var f=y(),m=l(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.weekStartsOn)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:f.weekStartsOn)&&void 0!==r?r:null===(c=f.locale)||void 0===c||null===(h=c.options)||void 0===h?void 0:h.weekStartsOn)&&void 0!==n?n:0);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=u(t),v=g.getUTCDay(),p=(v<m?7:0)+v-m;return g.setUTCDate(g.getUTCDate()-p),g.setUTCHours(0,0,0,0),g}function v(t,e){var n,r,o,a,i,d,c,h;s(1,arguments);var f=u(t),m=f.getUTCFullYear(),v=y(),p=l(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:v.firstWeekContainsDate)&&void 0!==r?r:null===(c=v.locale)||void 0===c||null===(h=c.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==n?n:1);if(!(p>=1&&p<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var w=new Date(0);w.setUTCFullYear(m+1,0,p),w.setUTCHours(0,0,0,0);var b=g(w,e),C=new Date(0);C.setUTCFullYear(m,0,p),C.setUTCHours(0,0,0,0);var T=g(C,e);return f.getTime()>=b.getTime()?m+1:f.getTime()>=T.getTime()?m:m-1}function p(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const w=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return p("yy"===e?r%100:r,e.length)},b=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):p(n+1,2)},C=function(t,e){return p(t.getUTCDate(),e.length)},T=function(t,e){return p(t.getUTCHours()%12||12,e.length)},D=function(t,e){return p(t.getUTCHours(),e.length)},N=function(t,e){return p(t.getUTCMinutes(),e.length)},S=function(t,e){return p(t.getUTCSeconds(),e.length)},x=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return p(Math.floor(r*Math.pow(10,n-3)),e.length)};var M={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return w(t,e)},Y:function(t,e,n,r){var o=v(t,r),a=o>0?o:1-o;return"YY"===e?p(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):p(a,e.length)},R:function(t,e){return p(f(t),e.length)},u:function(t,e){return p(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return p(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return p(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return b(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return p(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,r){var o=function(t,e){s(1,arguments);var n=u(t),r=g(n,e).getTime()-function(t,e){var n,r,o,a,i,d,c,u;s(1,arguments);var h=y(),f=l(null!==(n=null!==(r=null!==(o=null!==(a=null==e?void 0:e.firstWeekContainsDate)&&void 0!==a?a:null==e||null===(i=e.locale)||void 0===i||null===(d=i.options)||void 0===d?void 0:d.firstWeekContainsDate)&&void 0!==o?o:h.firstWeekContainsDate)&&void 0!==r?r:null===(c=h.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==n?n:1),m=v(t,e),p=new Date(0);return p.setUTCFullYear(m,0,f),p.setUTCHours(0,0,0,0),g(p,e)}(n,e).getTime();return Math.round(r/6048e5)+1}(t,r);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):p(o,e.length)},I:function(t,e,n){var r=function(t){s(1,arguments);var e=u(t),n=h(e).getTime()-function(t){s(1,arguments);var e=f(t),n=new Date(0);return n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0),h(n)}(e).getTime();return Math.round(n/6048e5)+1}(t);return"Io"===e?n.ordinalNumber(r,{unit:"week"}):p(r,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):C(t,e)},D:function(t,e,n){var r=function(t){s(1,arguments);var e=u(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=n-e.getTime();return Math.floor(r/864e5)+1}(t);return"Do"===e?n.ordinalNumber(r,{unit:"dayOfYear"}):p(r,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return p(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var o=t.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return p(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),o=0===r?7:r;switch(e){case"i":return String(o);case"ii":return p(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,o=t.getUTCHours();switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,o=t.getUTCHours();switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return T(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):D(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):p(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):p(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):N(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):S(t,e)},S:function(t,e){return x(t,e)},X:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return k(o);case"XXXX":case"XX":return U(o);default:return U(o,":")}},x:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return k(o);case"xxxx":case"xx":return U(o);default:return U(o,":")}},O:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+q(o,":");default:return"GMT"+U(o,":")}},z:function(t,e,n,r){var o=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+q(o,":");default:return"GMT"+U(o,":")}},t:function(t,e,n,r){var o=r._originalDate||t;return p(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,r){return p((r._originalDate||t).getTime(),e.length)}};function q(t,e){var n=t>0?"-":"+",r=Math.abs(t),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=e||"";return n+String(o)+i+p(a,2)}function k(t,e){return t%60==0?(t>0?"-":"+")+p(Math.abs(t)/60,2):U(t,e)}function U(t,e){var n=e||"",r=t>0?"-":"+",o=Math.abs(t);return r+p(Math.floor(o/60),2)+n+p(o%60,2)}const P=M;var F=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},E=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},W={p:E,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],o=r[1],a=r[2];if(!a)return F(t,e);switch(o){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",F(o,e)).replace("{{time}}",E(a,e))}};const A=W;var O=["D","DD"],Y=["YY","YYYY"];function L(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var I={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function j(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}var H,z={date:j({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:j({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:j({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},$={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function Q(t){return function(e,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,a=null!=n&&n.width?String(n.width):o;r=t.formattingValues[a]||t.formattingValues[o]}else{var i=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;r=t.values[s]||t.values[i]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function G(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,o=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],a=e.match(o);if(!a)return null;var i,s=a[0],d=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(d)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(s))return n}(d):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(s))return n}(d);return i=t.valueCallback?t.valueCallback(c):c,{value:i=n.valueCallback?n.valueCallback(i):i,rest:e.slice(s.length)}}}const R={code:"en-US",formatDistance:function(t,e,n){var r,o=I[t];return r="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:z,formatRelative:function(t,e,n,r){return $[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:Q({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:Q({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:Q({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:Q({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:Q({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(H={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(H.matchPattern);if(!n)return null;var r=n[0],o=t.match(H.parsePattern);if(!o)return null;var a=H.valueCallback?H.valueCallback(o[0]):o[0];return{value:a=e.valueCallback?e.valueCallback(a):a,rest:t.slice(r.length)}}),era:G({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:G({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:G({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:G({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:G({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var X=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,B=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,_=/^'([^]*?)'?$/,J=/''/g,V=/[a-zA-Z]/;function K(t,e,n){var r,o,a,i,c,h,f,m,g,v,p,w,b,C,T,D,N,S;s(2,arguments);var x=String(e),M=y(),q=null!==(r=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:M.locale)&&void 0!==r?r:R,k=l(null!==(a=null!==(i=null!==(c=null!==(h=null==n?void 0:n.firstWeekContainsDate)&&void 0!==h?h:null==n||null===(f=n.locale)||void 0===f||null===(m=f.options)||void 0===m?void 0:m.firstWeekContainsDate)&&void 0!==c?c:M.firstWeekContainsDate)&&void 0!==i?i:null===(g=M.locale)||void 0===g||null===(v=g.options)||void 0===v?void 0:v.firstWeekContainsDate)&&void 0!==a?a:1);if(!(k>=1&&k<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var U=l(null!==(p=null!==(w=null!==(b=null!==(C=null==n?void 0:n.weekStartsOn)&&void 0!==C?C:null==n||null===(T=n.locale)||void 0===T||null===(D=T.options)||void 0===D?void 0:D.weekStartsOn)&&void 0!==b?b:M.weekStartsOn)&&void 0!==w?w:null===(N=M.locale)||void 0===N||null===(S=N.options)||void 0===S?void 0:S.weekStartsOn)&&void 0!==p?p:0);if(!(U>=0&&U<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!q.localize)throw new RangeError("locale must contain localize property");if(!q.formatLong)throw new RangeError("locale must contain formatLong property");var F=u(t);if(!function(t){if(s(1,arguments),!function(t){return s(1,arguments),t instanceof Date||"object"===d(t)&&"[object Date]"===Object.prototype.toString.call(t)}(t)&&"number"!=typeof t)return!1;var e=u(t);return!isNaN(Number(e))}(F))throw new RangeError("Invalid time value");var E=function(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}(F),W=function(t,e){return s(2,arguments),function(t,e){s(2,arguments);var n=u(t).getTime(),r=l(e);return new Date(n+r)}(t,-l(e))}(F,E),I={firstWeekContainsDate:k,weekStartsOn:U,locale:q,_originalDate:F};return x.match(B).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,A[e])(t,q.formatLong):t})).join("").match(X).map((function(r){if("''"===r)return"'";var o,a,i=r[0];if("'"===i)return(a=(o=r).match(_))?a[1].replace(J,"'"):o;var s,d=P[i];if(d)return null!=n&&n.useAdditionalWeekYearTokens||(s=r,-1===Y.indexOf(s))||L(r,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!function(t){return-1!==O.indexOf(t)}(r)||L(r,e,String(t)),d(W,r,q.localize,I);if(i.match(V))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}const Z={0:"Sunday",1:"Monday",2:"Tuesday",3:"Wednesday",4:"Thursday",5:"Friday",6:"Saturday"},tt={0:"12:00 AM",3:"3:00 AM",6:"6:00 AM",9:"9:00 AM",12:"12:00 PM",15:"3:00 PM",18:"6:00 PM",21:"9:00 PM"},et=(nt="&#8457",{setTemperatureUnit:t=>{nt=t},getTemperatureUnit:()=>nt});var nt;const rt={transferForecastDay:[],transferForecastCondition:[],transferHourlyForecast:[],transferForecastIcon:{},transferLocationData:{}},ot={locationInfoIsDisplayed:!1};function at(t){const e=[],n=[],r=[];t.then((function(t){const o=Object.assign({},t.location),a=Object.assign({},t.forecast);a.forecastday.forEach((t=>{e.push(Object.assign({},t.day))})),a.forecastday.forEach((t=>{r.push(Object.assign({},t.hour))})),e.forEach((t=>{n.push(Object.assign({},t.condition))})),rt.transferHourlyForecast=r,function(t){const e=document.querySelector(".current-location-info"),n=document.querySelector(".main");ot.locationInfoIsDisplayed=!0,n.hasAttribute("id")&&n.removeAttribute("id"),e.childNodes[0].childNodes[1].textContent=t.name,e.childNodes[1].childNodes[1].textContent=t.region,e.childNodes[2].childNodes[1].textContent=t.country;const r=new Date,o=K(new Date(r.getFullYear(),r.getMonth(),r.getDate()),"MMM dd yyyy");for(const t in Z)parseInt(t)===r.getDay()&&(e.childNodes[3].childNodes[1].textContent=`${Z[t]} ${o}`)}(o),async function(t,e,n,r){const o=document.querySelector(".display-forecast"),a=document.querySelectorAll(".display-forecast > div > div:nth-child(1) > img"),i=document.querySelectorAll(".display-forecast > div > div:nth-child(2)"),s=document.querySelectorAll(".display-forecast > div > div:nth-child(3) > div:nth-child(1)"),d=document.querySelector(".user-main > div:nth-child(2)"),c=document.querySelector(".user-main > div:nth-child(3");ft.forecastIsDisplayed=!0,o.hasAttribute("id")&&o.removeAttribute("id");let u=0;const l=await Promise.all(e.map((t=>fetch(`https:${t.icon}`))));for(const t of a)t.src=l[u].url,u++;u=0,n.forecastday.forEach((t=>{const e=new Date(t.date);for(const t in Z)e.getDay()===parseInt(t)&&(i[u].textContent=Z[t]);u++})),u=0,e.forEach(((t,e)=>{s[u].textContent=t.text,u++})),rt.transferForecastDay=t,rt.transferForecastCondition=e,rt.transferForecastIcon=Object.assign({},l),rt.transferLocationData=Object.assign({},r),d.classList.contains("current")?dt(t,"&#8457"):c.classList.contains("current")&&dt(t,"&#8451")}(e,n,a,o)}))}async function it(t){const e=document.querySelector(".display-hourly-forecast"),n=document.querySelectorAll(".display-hourly-forecast > div > div:nth-child(1)"),r=document.querySelectorAll(".display-hourly-forecast > div > div:nth-child(2)"),o=document.querySelectorAll(".display-hourly-forecast > div > div:nth-child(3) img");e.hasAttribute("id")&&e.removeAttribute("id");let a=[];for(const e in t)a.push(t[e].time.slice(11,13));let i=0,s=[];for(const t in tt)a[i].startsWith("0"),i===parseInt(t)&&s.push(tt[t]),i+=3;i=0,n.forEach((t=>{t.textContent=s[i],i++})),i=0,r.forEach((e=>{var n;e.innerHTML=`${n=t[i],"&#8457"===et.getTemperatureUnit()?n.temp_f:"&#8451"===et.getTemperatureUnit()?n.temp_c:void 0} ${et.getTemperatureUnit()}`,i+=3})),i=0;let d=[];for(const e in t)d.push(Object.assign({},t[e].condition));const c=await Promise.all(d.map((t=>fetch(`https:${t.icon}`))));o.forEach((t=>{t.src=c[i].url,i+=3}))}function st(t,e,n,r){const o=document.querySelector(".display-selected-forecast-day"),a=document.querySelector(".display-selected-forecast-day > div:nth-child(1) img");var i;o.hasAttribute("id")&&o.removeAttribute("id"),a.src=r.url,o.childNodes[1].childNodes[1].textContent=t.name,o.childNodes[2].childNodes[1].textContent=t.region,o.childNodes[3].childNodes[1].textContent=t.country,o.childNodes[4].childNodes[1].innerHTML=`${i=e,"&#8457"===et.getTemperatureUnit()?i.maxtemp_f:"&#8451"===et.getTemperatureUnit()?i.maxtemp_c:void 0} ${et.getTemperatureUnit()}`,o.childNodes[5].childNodes[1].textContent=`${e.avghumidity}%`,o.childNodes[6].childNodes[1].textContent=`${e.totalprecip_in} in`,o.childNodes[7].childNodes[1].textContent=`${e.maxwind_mph} mph`,o.childNodes[8].childNodes[1].textContent=n.text}function dt(t,e){const n=document.querySelectorAll(".display-forecast > div > div:nth-child(4) > div");let r=0;et.setTemperatureUnit(e),"&#8457"===e?(t.forEach((t=>{n[r].innerHTML=`${t.maxtemp_f} ${e}`,r++})),!0===ft.selectedForecastIsDisplayed&&st(mt.locationData,mt.forecastDay,mt.forecastCondition,mt.forecastIcon),!0===ft.hourlyForecastIsDisplayed&&it(mt.hourlyForecastDay)):"&#8451"===e&&(t.forEach((t=>{n[r].innerHTML=`${t.maxtemp_c} ${e}`,r++})),!0===ft.selectedForecastIsDisplayed&&st(mt.locationData,mt.forecastDay,mt.forecastCondition,mt.forecastIcon),!0===ft.hourlyForecastIsDisplayed&&it(mt.hourlyForecastDay))}const ct=document.querySelector(".celsius-button"),ut=document.querySelector(".user-main > div:nth-child(2)");ut.classList.add("current");const lt=document.querySelector(".fahrenheit-button"),ht=document.querySelector(".user-main > div:nth-child(3)");ht.classList.add("hide"),function(){const t=document.querySelector(".display-selected-forecast-day");r(9,t),n(1,0,t),o(9,1,t,2),t.childNodes[1].childNodes[0].textContent="Name:",t.childNodes[2].childNodes[0].textContent="Region:",t.childNodes[3].childNodes[0].textContent="Country:",t.childNodes[4].childNodes[0].textContent="Temperature:",t.childNodes[5].childNodes[0].textContent="Humidity:",t.childNodes[6].childNodes[0].textContent="Precipitation:",t.childNodes[7].childNodes[0].textContent="Wind:",t.childNodes[8].childNodes[0].textContent="Condition:",t.setAttribute("id","hide-display")}(),function(){const t=document.querySelector(".display-forecast");r(3,t),o(3,0,t,4),e(3,t,0),a(3,0,t),i(3,0,t),t.setAttribute("id","hide-display")}(),function(){const t=document.querySelector(".display-hourly-forecast");r(8,t),o(8,0,t,3),e(8,t,2),t.setAttribute("id","hide-display")}(),function(){const t=document.querySelector(".current-location-info"),e=document.querySelector(".user-main");r(4,t),o(4,0,t,2),t.childNodes[0].childNodes[0].textContent="City:",t.childNodes[1].childNodes[0].textContent="Region:",t.childNodes[2].childNodes[0].textContent="Country:",t.childNodes[3].childNodes[0].textContent="Date:",e.setAttribute("id","hide-display")}();const ft={hourlyForecastIsDisplayed:!1,selectedForecastIsDisplayed:!1,forecastIsDisplayed:!1},mt={locationData:{},hourlyForecastDay:{},forecastIcon:[],forecastCondition:[],forecastDay:[]};(()=>{document.querySelector(".user-input-container > form > div:nth-child(2) button").addEventListener("click",(t=>{!function(t){t.preventDefault();const e=document.querySelector(".display-selected-forecast-day"),n=document.querySelector(".display-forecast"),r=document.querySelector(".display-hourly-forecast"),o=document.querySelectorAll(".display-hourly-forecast > div > div:nth-child(1)"),a=document.querySelectorAll(".display-hourly-forecast > div > div:nth-child(2)"),i=document.querySelectorAll(".display-hourly-forecast > div > div:nth-child(3)"),s=document.querySelector(".current-location-info"),d=document.querySelector(".user-main"),c=document.querySelector(".main"),u=document.querySelector(".error-input-message"),l=async function(t){const e=await fetch(`https://api.weatherapi.com/v1/forecast.json?key=3859976577fc42b6b9392348232703&q=${t}&days=3`,{mode:"cors"});return await e.json()}(document.querySelector("#user-location").value);if(!0===ft.selectedForecastIsDisplayed){e.childNodes[0].removeChild(document.querySelector(".display-selected-forecast-day > div:nth-child(1) img[src]")),e.childNodes[1].childNodes[1].textContent="",e.childNodes[2].childNodes[1].textContent="",e.childNodes[3].childNodes[1].textContent="",e.childNodes[4].childNodes[1].textContent="",e.childNodes[5].childNodes[1].textContent="",e.childNodes[6].childNodes[1].textContent="",e.childNodes[7].childNodes[1].textContent="",e.childNodes[8].childNodes[1].textContent="";const t=document.createElement("img");e.childNodes[0].appendChild(t),ft.selectedForecastIsDisplayed=!1,e.setAttribute("id","hide-display")}if(!0===ft.hourlyForecastIsDisplayed){for(let t=0;t<o.length;t++)o[t].textContent="";for(let t=0;t<o.length;t++)a[t].innerHTML="";for(let t=0;t<i.length;t++){i[t].removeChild(document.querySelector(".display-hourly-forecast > div > div:nth-child(3) img[src]"));const e=document.createElement("img");i[t].appendChild(e)}ft.hourlyForecastIsDisplayed=!1,r.setAttribute("id","hide-display")}for(let t=0;t<4;t++)s.childNodes[t].childNodes[1].textContent="";l.then((function(t){for(const o of Object.entries(t))"error"===o[0]?(u.textContent=o[1].message,!0===ot.locationInfoIsDisplayed&&(c.setAttribute("id","hide-display"),ot.locationInfoIsDisplayed=!1),!0===ft.forecastIsDisplayed&&(n.setAttribute("id","hide-display"),console.log("The forecast was displayed: ",ft.forecastIsDisplayed),ft.forecastIsDisplayed=!1),e.setAttribute("id","hide-display"),r.setAttribute("id","hide-display")):"location"!==o[0]&&"current"!==o[1]||(u.textContent="",d.removeAttribute("id"),n.removeAttribute("id"),at(l))}))}(t),document.querySelector(".user-input-container > form").reset()}));const t=document.querySelectorAll(".display-forecast > div > div:nth-child(1) img");for(let e=0;e<t.length;e++)t[e].addEventListener("click",(()=>{st(rt.transferLocationData,rt.transferForecastDay[e],rt.transferForecastCondition[e],rt.transferForecastIcon[e]),document.querySelector(".display-selected-forecast-day").removeAttribute("id"),ft.hourlyForecastIsDisplayed=!0,mt.hourlyForecastDay=Object.assign({},rt.transferHourlyForecast[e]),it(mt.hourlyForecastDay),document.querySelector(".display-hourly-forecast").removeAttribute("id"),ft.selectedForecastIsDisplayed=!0,mt.locationData=Object.assign({},rt.transferLocationData),mt.forecastIcon=rt.transferForecastIcon[e],mt.forecastCondition=rt.transferForecastCondition[e],mt.forecastDay=rt.transferForecastDay[e]}));ct.addEventListener("click",(()=>{ht.classList.remove("hide"),ht.classList.add("current"),ut.classList.add("hide"),ut.classList.remove("current"),dt(rt.transferForecastDay,"&#8451")})),lt.addEventListener("click",(()=>{ut.classList.remove("hide"),ut.classList.add("current"),ht.classList.add("hide"),ht.classList.remove("current"),dt(rt.transferForecastDay,"&#8457")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,